'use client'; import * as React from 'react';
import * as RechartsPrimitive from 'recharts'; import { cn } from '@/lib/utils';
import PropTypes from 'prop-types'; // Format THEME_NAME= { light: '', dark: '.dark' } as const; export icon?: React.ComponentType; } & ( | { color?: string; theme? color?: never; theme);
}; }; const ChartContext = React.createContext(null); function useChart() { const context = React.useContext(ChartContext); if (!context) { throw new Error('useChart must be used within a '); } return context;
} const ChartContainer = React.forwardRef< HTMLDivElement, React.ComponentProps & { config: ChartConfig; children >['children']; }
>(({ id, className, children, config, ...props }, ref) => { const uniqueId = React.useId(); const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`; return ( {children} );
});
ChartContainer.displayName = 'Chart'; const ChartStyle = ({ id, config } id: string; config=> { const colorConfig = Object.entries(config).filter( ([_, config]) => config.theme || config.color ); if (!colorConfig.length) { return null; } return ( `
${prefix} [data-chart=${id}] {
${colorConfig .map(([key, itemConfig]) => { const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color; return color ? ` --color-${key}: ${color};` : null; }) .join('\n')}
}
` ) .join('\n'), }} /> );
}; const ChartTooltip = RechartsPrimitive.Tooltip; const ChartTooltipContent = React.forwardRef< HTMLDivElement, React.ComponentProps & React.ComponentProps & { hideLabel?: boolean; hideIndicator?: boolean; indicator?: 'line' | 'dot' | 'dashed'; nameKey?: string; labelKey?: string; }
>( ( { active, payload, className, indicator = 'dot', hideLabel = false, hideIndicator = false, label, labelFormatter, labelClassName, formatter, color, nameKey, labelKey, }, ref ) => { const { config } = useChart(); const tooltipLabel = React.useMemo(() => { if (hideLabel || !payload?.length) { return null; } const [item] = payload; const key = `${labelKey || item.dataKey || item.name || 'value'}`; const itemConfig = getPayloadConfigFromPayload(config, item, key); const value = !labelKey && typeof label === 'string' ? config[label as keyof typeof config]?.label || label : itemConfig?.label; if (labelFormatter) { return ( {labelFormatter(value, payload)} ); } if (!value) { return null; } return {value}; }, [ label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey, ]); if (!active || !payload?.length) { return null; } const nestLabel = payload.length === 1 && indicator !== 'dot'; return ( {!nestLabel ? tooltipLabel ="grid gap-1.5"> {payload.map((item, index) => { const key = `${nameKey || item.name || item.dataKey || 'value'}`; const itemConfig = getPayloadConfigFromPayload(config, item, key); const indicatorColor = color || item.payload.fill || item.color; return ( svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground', indicator === 'dot' && 'items-center' )} > {formatter && item?.value !== undefined && item.name ? ( formatter(item.value, item.name, item, index, item.payload) ) {itemConfig?.icon ? ( ) !hideIndicator && ( ) )} {nestLabel ? tooltipLabel ="text-muted-foreground"> {itemConfig?.label || item.name} {item.value && ( {item.value.toLocaleString()} )} )} ); })} ); }
);
ChartTooltipContent.displayName = 'ChartTooltip'; const ChartLegend = RechartsPrimitive.Legend; const ChartLegendContent = React.forwardRef< HTMLDivElement, React.ComponentProps & Pick & { hideIcon?: boolean; nameKey?: string; }
>( ( { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref ) => { const { config } = useChart(); if (!payload?.length) { return null; } return ( {payload.map((item) => { const key = `${nameKey || item.dataKey || 'value'}`; const itemConfig = getPayloadConfigFromPayload(config, item, key); return ( svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground' )} > {itemConfig?.icon && !hideIcon ? ( ) ="h-2 w-2 shrink-0 rounded-[2px]" style={{ backgroundColor /> )} {itemConfig?.label} ); })} ); }
);
ChartLegendContent.displayName = 'ChartLegend'; // Helper to extract item config from a payload.
function getPayloadConfigFromPayload( config payload key !== 'object' || payload === null) { return undefined; } const payloadPayload = 'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null ? payload.payload : undefined; let configLabelKey= key; if ( key in payload && typeof payload[key as keyof typeof payload] === 'string' ) { configLabelKey = payload[key as keyof typeof payload] as string; } else if ( payloadPayload && key in payloadPayload && typeof payloadPayload[key as keyof typeof payloadPayload] === 'string' ) { configLabelKey = payloadPayload[ key as keyof typeof payloadPayload ] as string; } return configLabelKey in config ? config[configLabelKey] config];
} export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle,
};
